b'Python3\xe4\xb8\xad\xe6\xad\xa3\xe5\x88\x99\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\xb9\xe6\xb3\x95'本节我们看一下正则表达式的相关用法，正则表达式是处理字符串的强大的工具，它有自己特定的语法结构，有了它，实现字符串的检索、替换、匹配验证都不在话下。
当然对于爬虫来说，有了它，我们从HTML里面提取我们想要的信息就非常方便了。
说了这么多，可能我们对它到底是个什么还是比较模糊，下面我们就用几个实例来感受一下正则表达式的用法。
我们打开开源中国提供的正则表达式测试工具http://tool.oschina.net/regex/，打开之后我们可以输入待匹配的文本，然后选择常用的正则表达式，就可以从我们输入的文本中得出相应的匹配结果了。
例如我们在这里输入待匹配的文本如下：
 我们在网页中选择匹配Email地址，就可以看到在下方出现了文本中的Email。如果我们选择了匹配网址URL，就可以看到在下方出现了文本中的URL。是不是非常神奇？
其实，在这里就是用了正则表达式匹配，也就是用了一定的规则将特定的文本提取出来。比如电子邮件它开头是一段字符串，然后是一个@符号，然后就是某个域名，这是有特定的组成格式的。另外对于URL，开头是协议类型，然后是冒号加双斜线，然后是域名加路径。
对于URL来说，我们就可以用下面的正则表达式匹配：
 这个正则表达式看上去是乱糟糟的一团，其实不然，这里面都是有特定的语法规则的。比如<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">a-z</code>代表匹配任意的小写字母，<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">\s</code>表示匹配任意的空白字符，<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">*</code>就代表匹配前面的字符任意多个，这一长串的正则表达式就是这么多匹配规则的组合，最后实现特定的匹配功能。
写好正则表达式后，我们就可以拿它去一个长字符串里匹配查找了，不论这个字符串里面有什么，只要符合我们写的规则，统统可以找出来。那么对于网页来说，如果我们想找出网页源代码里有多少URL，就可以用匹配URL的正则表达式去匹配，就可以得到源码中的URL了。
在上面我们说了几个匹配规则，那么正则表达式的规则到底有多少？那么在这里把常用的匹配规则总结一下：
模式描述
\w匹配字母数字及下划线
\W匹配非字母数字及下划线
\s匹配任意空白字符，等价于 [\t\n\r\f].
\S匹配任意非空字符
\d匹配任意数字，等价于 [0-9]
\D匹配任意非数字
\A匹配字符串开始
\Z匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串
\z匹配字符串结束
\G匹配最后匹配完成的位置
\n匹配一个换行符
\t匹配一个制表符
^匹配字符串的开头
$匹配字符串的末尾。
.匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。
[...]用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'
[^...]不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。
*匹配0个或多个的表达式。
+匹配1个或多个的表达式。
?匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式
{n}精确匹配n个前面表达式。
{n, m}匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式
a|b匹配a或b
( )匹配括号内的表达式，也表示一个组

可能完了之后就有点晕晕的了把，不用担心，下面我们会详细讲解下一些常见的规则的用法。怎么用它来从网页中提取我们想要的信息。
其实正则表达式不是Python独有的，它在其他编程语言中也可以使用，但是Python的re库提供了整个正则表达式的实现，利用re库我们就可以在Python中使用正则表达式来，在Python中写正则表达式几乎都是用的这个库。
下面我们就来了解下它的用法。
在这里首先介绍第一个常用的匹配方法，match()方法，我们向这个方法传入要匹配的字符串以及正则表达式，就可以来检测这个正则表达式是否匹配字符串了。
match()方法会尝试从字符串的起始位置匹配正则表达式，如果匹配，就返回匹配成功的结果，如果不匹配，那就返回None。
我们用一个实例来感受一下：
  开头的<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">^</code>是匹配字符串的开头，也就是以<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">Hello</code>开头，然后<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">\s</code>匹配空白字符，用来匹配目标字符串的空格，<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">\d</code>匹配数字，三个<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">\d</code>匹配<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">123</code>，然后再写一个<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">\s</code>匹配空格，后面还有<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">4567</code>，我们其实可以依然用四个<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">\d</code>来匹配，但是这么写起来比较繁琐，所以在后面可以跟<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">{4}</code>代表匹配前面的字符四次，也就是匹配四个数字，这样也可以完成匹配，然后后面再紧接一个空白字符，然后<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">\w{10}</code>匹配10个字母及下划线，正则表达式到此为止就结束了，我们注意到其实并没有把目标字符串匹配完，不过这样依然可以进行匹配，只不过匹配结果短一点而已。
我们调用match()方法，第一个参数传入了正则表达式，第二个参数传入了要匹配的字符串。
打印输出一下结果，可以看到结果是SRE_Match对象，证明成功匹配，它有两个方法，group()方法可以输出匹配到的内容，结果是<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">Hello 123 4567 World_This</code>，这恰好是我们正则表达式规则所匹配的内容，span()方法可以输出匹配的范围，结果是<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">(0, 25)</code>，这个就是匹配到的结果字符串在原字符串中的位置范围。
通过上面的例子我们可以基本了解怎样在Python中怎样使用正则表达式来匹配一段文字。
刚才我们用了match()方法可以得到匹配到的字符串内容，但是如果我们想从字符串中提取一部分内容怎么办呢？就像最前面的实例一样，从一段文本中提取出邮件或电话号等内容。
在这里可以使用<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">()</code>括号来将我们想提取的子字符串括起来，<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">()</code>实际上就是标记了一个子表达式的开始和结束位置，被标记的每个子表达式会依次对应每一个分组，我们可以调用group()方法传入分组的索引即可获取提取的结果。
下面我们用一个实例感受一下：
 运行结果如下：
 刚才我们写的正则表达式其实比较复杂，出现空白字符我们就写<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">\s</code>匹配空白字符，出现数字我们就写<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">\d</code>匹配数字，工作量非常大，其实完全没必要这么做，还有一个万能匹配可以用，也就是<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*</code>，<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.</code>可以匹配任意字符(除换行符)，<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">*</code>又代表匹配前面的字符无限次，所以它们组合在一起就可以匹配任意的字符了，有了它我们就不用挨个字符地匹配了。
所以接着上面的例子，我们可以改写一下正则表达式。
  因此，我们可以在使用<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*</code>来简化正则表达式的书写。
在使用上面的通用匹配<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*</code>的时候可能我们有时候匹配到的并不是想要的结果，我们看下面的例子：
  这里就涉及一个贪婪匹配与非贪婪匹配的原因了，贪婪匹配下，<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*</code>会匹配尽可能多的字符，我们的正则表达式中<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*</code>后面是<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">\d+</code>，也就是至少一个数字，并没有指定具体多少个数字，所以<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*</code>就尽可能匹配多的字符，所以它把<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">123456</code>也匹配了，给<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">\d+</code>留下一个可满足条件的数字<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">7</code>，所以<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">\d+</code>得到的内容就只有数字7了。
但这样很明显会给我们的匹配带来很大的不便，有时候匹配结果会莫名其妙少了一部分内容。其实这里我们只需要使用非贪婪匹配匹配就好了，非贪婪匹配的写法是<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*?</code>，多了一个<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">?</code>，那么它可以达到怎样的效果？我们再用一个实例感受一下：
  所以说，在做匹配的时候，字符串中间我们可以尽量使用非贪婪匹配来匹配，也就是用<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*?</code>来代替<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*</code>，以免出现匹配结果缺失的情况。
但这里注意，如果匹配的结果在字符串结尾，<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*?</code>就有可能匹配不到任何内容了，因为它会匹配尽可能少的字符，例如：
  所以在这里好好体会一下贪婪匹配和非贪婪匹配的原理，对后面写正则表达式非常有帮助。
正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。
我们用一个实例先来感受一下：
  那我们加了一个换行符为什么就匹配不到了呢？是因为<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.</code>匹配的是除换行符之外的任意字符，当遇到换行符时，<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*?</code>就不能匹配了，所以导致匹配失败。
那么在这里我们只需要加一个修饰符<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">re.S</code>，即可修正这个错误。
 运行结果：
 另外还有一些修饰符，在必要的情况下也可以使用：
修饰符描述
re.I使匹配对大小写不敏感
re.L做本地化识别（locale-aware）匹配
re.M多行匹配，影响 ^ 和 $
re.S使 . 匹配包括换行在内的所有字符
re.U根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.
re.X该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。

在网页匹配中较为常用的为re.S、re.I。
我们知道正则表达式定义了许多匹配模式，如<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.</code>匹配除换行符以外的任意字符，但是如果目标字符串里面它就包含<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.</code>我们改怎么匹配？
那么这里就需要用到转义匹配了，我们用一个实例来感受一下：
  以上是写正则表达式常用的几个知识点，熟练掌握上面的知识点对后面我们写正则表达式匹配非常有帮助。
我们在前面提到过match()方法是从字符串的开头开始匹配，一旦开头不匹配，那么整个匹配就失败了。
我们看下面的例子：
  所以在这里就有另外一个方法search()，它在匹配时会扫描整个字符串，然后返回第一个成功匹配的结果，也就是说，正则表达式可以是字符串的一部分，在匹配时，search()方法会依次扫描字符串，直到找到第一个符合规则的字符串，然后返回匹配内容，如果搜索完了还没有找到，那就返回None。
我们把上面的代码中的match()方法修改成search()，再看下运行结果：
 所以说，为了匹配方便，我们可以尽量使用search()方法。
下面我们再用几个实例来感受一下search()方法的用法。
首先这里有一段待匹配的HTML文本，我们接下来写几个正则表达式实例来实现相应信息的提取。
 首先我们尝试提取class为active的<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">&lt;li&gt;</code>节点内部的超链接包含的歌手名和歌名。
所以我们需要提取第三个<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">&lt;li&gt;</code>节点下的<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">&lt;a&gt;</code>节点的singer属性和文本。
所以正则表达式可以以<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">&lt;li&gt;</code>开头，然后接下来寻找一个标志符<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">active</code>，中间的部分可以用<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*?</code>来匹配，然后接下来我们要提取singer这个属性值，所以还需要写入<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">singer="(.*?)"</code>，我们需要提取的部分用小括号括起来，以便于用group()方法提取出来，它的两侧边界是双引号，然后接下来还需要匹配<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">&lt;a&gt;</code>节点的文本，那么它的左边界是<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">&gt;</code>，右边界是<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">&lt;/a&gt;</code>，所以我们指定一下左右边界，然后目标内容依然用<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">(.*?)</code>来匹配，所以最后的正则表达式就变成了<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">&lt;li.*?active.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</code>，然后我们再调用search()方法，它便会搜索整个HTML文本，找到符合正则表达式的第一个内容返回。
另外由于代码有换行，所以这里第三个参数需要传入<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">re.S</code>
所以整个匹配代码如下：
 运行结果：
 那么正则表达式不加active会怎样呢？也就是匹配不带class为active的节点内容，我们将正则表达式中的active去掉，代码改写如下：
 运行结果如下：
 注意在上面两次匹配中，search()方法的第三个参数我们都加了<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">re.S</code>，使得<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">.*?</code>可以匹配换行，所以含有换行的<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">&lt;li&gt;</code>节点被匹配到了，如果我们将其去掉，结果会是什么？
  由于绝大部分的HTML文本都包含了换行符，所以通过上面的例子，我们尽量都需要加上<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">re.S</code>修饰符，以免出现匹配不到的问题。
在前面我们说了search()方法的用法，它可以返回匹配正则表达式的第一个内容，但是如果我们想要获取匹配正则表达式的所有内容的话怎么办？这时就需要借助于findall()方法了。
findall()方法会搜索整个字符串然后返回匹配正则表达式的所有内容。
还是上面的HTML文本，如果我们想获取所有<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">&lt;a&gt;</code>节点的超链接、歌手和歌名，就可以将search()方法换成findall()方法。如果有返回结果的话就是list类型，所以我们需要遍历一下list来获依次获取每组内容。
  所以，如果只是获取第一个内容，可以用search()方法，当需要提取多个内容时，就可以用findall()方法。
正则表达式除了提取信息，我们有时候还需要借助于它来修改文本，比如我们想要把一串文本中的所有数字都去掉，如果我们只用字符串的replace()方法那就太繁琐了，在这里我们就可以借助于sub()方法。
我们用一个实例来感受一下：
  得到的结果就是替换修改之后的内容。
那么在上面的HTML文本中，如果我们想正则获取所有<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">&lt;li&gt;</code>节点的歌名，如果直接用正则表达式来提取可能比较繁琐，比如可以写成这样子：
 