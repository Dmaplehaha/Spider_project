b'\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe6\xa0\xb7\xe4\xbe\x8b'作为“绪论”的总结，我们来运用 Python 解决一个实际问题以对机器学习有具体的感受吧。由于该样例只是为了提供直观，我们就拿比较有名的一个小问题来进行阐述。俗话云：“麻雀虽小，五脏俱全”，我们完全可以通过这个样例来对机器学习的一般性步骤进行一个大致的认知
该问题来自 Coursera 上斯坦福大学机器学习课程（which is 我的入坑课程），其叙述如下：现有包含 47 个房子的面积和价格，需要建立一个模型对新的房价进行预测。稍微翻译一下问题，可以得知：
   原始数据集的前 10 个样本如下表所示，这里房子面积和房子价格的单位可以随意定夺、因为它们不会对结果造成影响：
http://mmbiz.qpic.cn/mmbiz_png/LiaGhAsRNttsN4HdvWsSp0DHrDYIRR8MdJuibYEnicgeZ0j1pzbtP7suHB4Fxy97bEz2lK7glP7Cmc7HtpdoPCEJw/0?wx_fmt=png
 （https://github.com/carefree0910/MachineLearning/blob/master/_Data/prices.txt）<span style="color: #555555;">。虽然该数据集比较简单，但可以看到其中的数字都相当大。保留它原始形式确实有可能是有必要的，但一般而言、我们应该对它做简单的处理以期望能够降低问题的复杂度。在这个例子里，我们采取常用的、将输入数据标准化的做法，其数学公式为：</span>

http://mmbiz.qpic.cn/mmbiz_png/LiaGhAsRNttsN4HdvWsSp0DHrDYIRR8MdzmykKNLPWBFb4Ckia1QAa9DfuN8LuXAlToT0qfdvpPFtM542VehPCtw/0?wx_fmt=png
  http://mmbiz.qpic.cn/mmbiz_png/LiaGhAsRNttsN4HdvWsSp0DHrDYIRR8MdicAC5ZA51yr24Yy6ImNv9tHa3ZcsjGPG2rbANUBCMxeglzNAJstdTVw/0?wx_fmt=png
这里横轴是标准化后的房子面积，纵轴是房子价格。以上我们已经比较好地完成了机器学习任务的第一步：数据预处理
 在弄好数据之后、下一步就要开始选择相应的学习方法和模型了。幸运的是，通过可视化原始数据，我们可以非常直观地感受到：我们很有可能通过线性回归（Linear Regression）中的多项式拟合来得到一个不错的结果。其模型的数学表达式如下：
注意：用多项式拟合散点只是线性回归的很小的一部分、但是它的直观意义比较明显。考虑到问题比较简单、我们才选用了多项式拟合。线性回归的详细讨论超出了本书的范围，这里不做赘述http://mmbiz.qpic.cn/mmbiz_png/LiaGhAsRNttsN4HdvWsSp0DHrDYIRR8Md0RbK86zxM7IYbNlFOdGgaaarnnDXIN7ZgibkT9nBlvibhreEPSNqTPAg/0?wx_fmt=png
其中f(x|p;n)f(x|p;n)就是我们的模型，<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">p</code>、<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">n</code>都是模型的参数，其中<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">p</code>是多项式<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">f</code>的各个系数、<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">n</code>是多项式的次数。L(p;n)L(p;n)则是模型的损失函数，这里我们采用了常见的平方损失函数、也就是所谓的欧氏距离（或说向量的二范数）。<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">x</code>、<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">y</code>则分别是输入向量和目标向量；在我们这个样例中，<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">x</code>、<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">y</code>这两个向量都是 47 维的向量，分别由 47 个不同的房子面积、房子价格所构成
在确定好模型后，我们就可以开始编写代码来进行训练了。对于大多数机器学习算法，所谓的训练正是最小化某个损失函数的过程，我们这个多项式拟合的模型也不例外：我们的目的就是让上面定义的L(p;n)L(p;n)最小。在数理统计领域里面有专门的理论研究这种回归问题，其中比较有名的正规方程更是直接给出了一个简单的解的通式。不过由于有 Numpy 的存在，这个训练过程甚至变得还要更加简单一些：
 
polyval(p, x)</code>：根据多项式的各项系数<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">p</code>和多项式中<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">x</code>的值、返回多项式的值<code style="font-size: 13px; padding-right: 4px; padding-left: 4px; color: rgb(199, 37, 78); border-radius: 3px; display: inline-block; margin-right: 5px; margin-left: 5px; background: rgb(238, 238, 238);">y</code>
模型做好后、我们就要尝试判断各种参数下模型的好坏了。为简洁，我们采用n=1,4,10n=1,4,10这三组参数进行评估。由于我们训练的目的是最小化损失函数，所以用损失函数来衡量模型的好坏似乎是一个合理的做法：
 那么怎么最直观地了解是否出现过拟合了呢？当然还是画图了：
  