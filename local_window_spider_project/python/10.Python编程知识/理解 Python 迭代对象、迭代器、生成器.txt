b'\xe7\x90\x86\xe8\xa7\xa3 Python \xe8\xbf\xad\xe4\xbb\xa3\xe5\xaf\xb9\xe8\xb1\xa1\xe3\x80\x81\xe8\xbf\xad\xe4\xbb\xa3\xe5\x99\xa8\xe3\x80\x81\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8'http://mmbiz.qpic.cn/mmbiz/cZV2hRpuAPhrxQU1opLkENnCB9ArIxUwWq26RwicbQNpQN3ubDHibBSJfI6PzP0icQfn0s21DvR4xKYyPEs741UXQ/0.gif?
    本文源自RQ作者的一篇博文，原文是
Iterables vs. Iterators vs. Generators，俺写的这篇文章是按照自己的理解做的参考翻译。
在了解Python的数据结构时，容器(container)、可迭代对象(iterable)、迭代器(iterator)、生成器(generator)、列表/集合/字典推导式(list,set,dict comprehension)众多概念参杂在一起，难免让初学者一头雾水，我将用一篇文章试图将这些概念以及它们之间的关系捋清楚。<br style=""  />
http://mmbiz.qpic.cn/mmbiz_png/rO1ibUkmNGMmicyvqybd0qMIa0MqjOJ519SCJhm0rnUxL14MFFltw3hyUoHWj468m5zsaNlhGUyrsPhX5lGuvtsg/640?wx_fmt=png
容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">in</span></code>,
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">not</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">
</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">in</span></code>关键字判断元素是否包含在容器中。通常这类数据结构把所有的元素存储在内存中（也有一些特列并不是所有的元素都放在内存）在Python中，常见的容器对象有：
list, deque, ....
set, frozensets, ....
dict, defaultdict, OrderedDict, Counter, ....
tuple, namedtuple, …
str
容器比较容易理解，因为你就可以把它看作是一个盒子、一栋房子、一个柜子，里面可以塞任何东西。从技术角度来说，当它可以用来询问某个元素是否包含在其中时，那么这个对象就可以认为是一个容器，比如 list，set，tuples都是容器对象：
      询问某元素是否在dict中用dict的中key：
   询问某substring是否在string中：
    尽管绝大多数容器都提供了某种方式来获取其中的每一个元素，但这并不是容器本身提供的能力，而是<strong style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; ">可迭代对象</strong>赋予了容器这种能力，当然并不是所有的容器都是可迭代的，比如：Bloom filter，虽然Bloom filter可以用来检测某个元素是否包含在容器中，但是并不能从容器中获取其中的每一个值，因为Bloom filter压根就没把元素存储在容器中，而是通过一个散列函数映射成一个值保存在数组中。
刚才说过，很多容器都是可迭代对象，此外还有更多的对象同样也是可迭代对象，比如处于打开状态的files，sockets等等。但凡是可以返回一个<strong style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; ">迭代器</strong>的对象都可称之为可迭代对象，听起来可能有点困惑，没关系，先看一个例子：
             这里
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">x</span></code>是一个可迭代对象，可迭代对象和容器一样是一种通俗的叫法，并不是指某种具体的数据类型，list是可迭代对象，dict是可迭代对象，set也是可迭代对象。
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">y</span></code>和
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">z</span></code>是两个独立的迭代器，迭代器内部持有一个状态，该状态用于记录当前迭代所在的位置，以方便下次迭代的时候获取正确的元素。迭代器有一种具体的迭代器类型，比如
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">list_iterator</span></code>，
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">set_iterator</span></code>。可迭代对象实现了
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">__iter__</span></code>和
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">__next__</span></code>方法（python2中是
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">next</span></code>方法，python3是
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">__next__</span></code>方法），这两个方法对应内置函数
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">iter</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">()</span></code>和
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">next</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">()</span></code>。
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">__iter__</span></code>方法返回可迭代对象本身，这使得他既是一个可迭代对象同时也是一个迭代器。
当运行代码：
   http://mmbiz.qpic.cn/mmbiz_png/rO1ibUkmNGMmicyvqybd0qMIa0MqjOJ5192yVTFO3w2iczzC0YP3amodXLVX9TdFhZmCRQsMsw9dlKECiaEcDWuIUA/640?wx_fmt=png
反编译该段代码，你可以看到解释器显示地调用
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">GET_ITER</span></code>指令，相当于调用
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">iter</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">(</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">x</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">)</span></code>，
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">FOR_ITER</span></code>指令就是调用
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">next</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">()</span></code>方法，不断地获取迭代器中的下一个元素，但是你没法直接从指令中看出来，因为他被解释器优化过了。
            那么什么迭代器呢？它是一个带状态的对象，他能在你调用
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">next</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">()</span></code>方法的时候返回容器中的下一个值，任何实现了
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">__next__</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">()</span></code>（python2中实现
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">next</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">()</span></code>）方法的对象都是迭代器，至于它是如何实现的这并不重要。
所以，迭代器就是实现了工厂模式的对象，它在你每次你询问要下一个值的时候给你返回。有很多关于迭代器的例子，比如
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">itertools</span></code>函数返回的都是迭代器对象。
生成无限序列：
      从一个有限序列中生成无限序列：
          从无限的序列中生成有限序列：
         为了更直观地感受迭代器内部的执行过程，我们自定义一个迭代器，以斐波那契数列为例：
                 Fib既是一个可迭代对象（因为它实现了
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">__iter__</span></code>方法），又是一个迭代器（因为实现了
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">__next__</span></code>方法）。实例变量
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">prev</span></code>和
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">curr</span></code>用户维护迭代器内部的状态。每次调用
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">next</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">()</span></code>方法的时候做两件事：
为下一次调用
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">next</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">()</span></code>方法修改状态
为当前这次调用生成返回结果
迭代器就像一个懒加载的工厂，等到有人需要的时候才给它生成值返回，没调用的时候就处于休眠状态等待下一次调用。
生成器算得上是Python语言中最吸引人的特性之一，生成器其实是一种特殊的迭代器，不过这种迭代器更加优雅。它不需要再像上面的类一样写
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">__iter__</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">()</span></code>和
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">__next__</span><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">()</span></code>方法了，只需要一个
<code class="" style="padding: 2px 7px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; font-family: Consolas, Menlo, Courier, monospace; background-color: rgb(45, 45, 45); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; line-height: 18px; border-width: 0px !important; "><span class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; color: rgb(48, 234, 48); ">yiled</span></code>关键字。 生成器一定是迭代器（反之不成立），因此任何生成器也是以一种懒加载的模式生成值。用生成器来实现斐波那契数列的例子是：
          生成器在Python中是一个非常强大的编程结构，可以用更少地中间变量写流式代码，此外，相比其它容器对象它更能节省内存和CPU，当然它可以用更少的代码来实现相似的功能。现在就可以动手重构你的代码了，但凡看到类似：
 