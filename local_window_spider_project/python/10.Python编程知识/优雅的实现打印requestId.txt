b'\xe4\xbc\x98\xe9\x9b\x85\xe7\x9a\x84\xe5\xae\x9e\xe7\x8e\xb0\xe6\x89\x93\xe5\x8d\xb0requestId'前言 整个思路我觉得还挺有趣的，值得分享出来</strong>，所以就有了这文章。
<span style="font-size: 16px;"></span>日志规范</code>，而日志规范中最最最重要的一点就是要有个requestId来跟踪整个整一个请求或服务的调用链路。<strong>需求来了，为每一条日志都加上requestId这个参数。这个需求再抽象一下，就是为每一个日志都增加一个前缀</strong>。这个前缀可以有requestId, server_name等等信息。这样抽象之后呢，如果还需要增加其他参数也方便。ps：requestId的生成可以简单粗暴的uuid来，也可以让它带有信息（IP，服务名等等），这个不是本文的重点，最好就由一个专门的函数来生成，以后有变化改起来也方便。正如某名言说的那样，<strong>用一个稳定的东西来包装一个不稳定的东西以提供一个稳定的服务</strong>。

不用动脑子想到的实现方式  抽象一下就是在每个调用间共享一个变量</strong>，此时大脑想起了threading模块中的local类，但是但是我们的服务部署一般是gevent的模式，threading的local模块并不是一个协程安全的东西。万能的google再次拯救我，在werkzeug实现了一个协程安全Local类，celery当中也实现了，实现方式都差不多，连注释都一毛一样。

最终的实现方式 在服务的开头出在local对象中设置上log的前缀，出口处删掉，每条log都从Local对象处获取前缀打印</strong>。这都是由框架来做，具体的业务代码是无感知的。这样做的好处就是对代码几乎是无入侵的，扩展性强，大家都开心的方式。在细化一下具体实现方式，<strong>本质上还是添加中间层来实现。对没错，任何计算机问题均可以通过增加一个中间层来解决</strong>。
http请求：celery异步任务：</strong>任务消息带上log前缀，任务开始前做添加上前缀，任务返回后删掉
 给application添加Local对象清理的中间件 自定义django的中间件  log的filter celery异步任务这个是整个实现的难点所在，也是值得借鉴的地方任务消息带上log前缀 这样仅仅需要将log前缀信息放在headers中即可</strong>。ps：测试的时候还顺便更加理解amqp这协议，celery的一下额外的控制参数例如task_id都是存放在消息的headers中的，然后在接收到消息后做统一的处理。
 任务开始前做添加上前缀，任务返回前删掉</strong>
直接翻源码还是挺痛苦的，有点晕，此时想到了pycharm是可以断点调试的，断点观察整个调用过程+全局关键字搜索 具体的一下代码</strong>
