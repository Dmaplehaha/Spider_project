b'\xe7\x9c\x8b\xe5\xae\x8c\xe8\xbf\x99\xe7\xaf\x87\xe6\x96\x87\xe7\xab\xa0\xe4\xbd\xa0\xe8\xbf\x98\xe4\xb8\x8d\xe7\x90\x86\xe8\xa7\xa3 Python \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe7\xa7\x8d\xe5\x8f\xaf\xe8\x83\xbd...'    看完这篇文章还不理解装饰器，只有一种可能，说明我写的还不够清晰，鼓励鼓励我吧。
讲 Python 装饰器前，我想先举个例子，虽有点污，但跟装饰器这个话题很贴切。
每个人都有的内裤主要功能是用来遮羞，但是到了冬天它没法为我们防风御寒，咋办？我们想到的一个办法就是把内裤改造一下，让它变得更厚更长，这样一来，它不仅有遮羞功能，还能提供保暖，不过有个问题，这个内裤被我们改造成了长裤后，虽然还有遮羞功能，但本质上它不再是一条真正的内裤了。于是聪明的人们发明长裤，在不影响内裤的前提下，直接把长裤套在了内裤外面，这样内裤还是内裤，有了长裤后宝宝再也不冷了。装饰器就像我们这里说的长裤，在不影响内裤作用的前提下，给我们的身子提供了保暖的功效。
谈装饰器前，还要先要明白一件事，Python 中的函数和 Java、C++不太一样，Python 中的函数可以像普通变量一样当做参数传递给另外一个函数，例如：
 先来看一个简单例子，虽然实际代码可能比这复杂很多：
    如果你接触 Python 有一段时间了的话，想必你对 @ 符号一定不陌生了，没错 @ 符号就是装饰器的语法糖，它放在函数开始定义的地方，这样就可以省略最后一步再次赋值的操作。
 装饰器在 Python 使用如此方便都要归因于 Python 的函数能像普通的对象一样能作为参数传递给其他函数，可以被赋值给其他变量，可以作为返回值，可以被定义在另外一个函数内。
可能有人问，如果我的业务逻辑函数 foo 需要参数怎么办？比如：
